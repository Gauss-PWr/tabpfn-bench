[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tabpfn-bench"
version = "0.1.0"
description = "A comprehensive benchmarking framework for evaluating TabPFN against traditional gradient boosting methods on tabular data"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = [
    "tabpfn",
    "benchmark",
    "tabular-data",
    "machine-learning",
    "xgboost",
    "lightgbm",
    "catboost",
    "gradient-boosting",
    "deep-learning",
    "transformer",
    "foundation-model"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "xgboost>=2.0.0",
    "lightgbm>=4.0.0",
    "catboost>=1.2.0",
    "tabpfn>=0.1.4",
    "hyperopt>=0.2.7",
    "openml>=0.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
visualization = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.1.0",
]
monitoring = [
    "psutil>=5.9.0",
    "memory-profiler>=0.61.0",
]
all = [
    "tabpfn-bench[dev,visualization,jupyter,monitoring]"
]

[project.urls]
Homepage = "https://github.com/yourusername/tabpfn-bench"
Documentation = "https://github.com/yourusername/tabpfn-bench#readme"
Repository = "https://github.com/yourusername/tabpfn-bench.git"
"Bug Tracker" = "https://github.com/yourusername/tabpfn-bench/issues"
"Research Paper" = "https://www.nature.com/articles/s41586-024-08328-6"

[project.scripts]
tabpfn-bench = "main:main"
tabpfn-bench-clf = "clf_main:main_clf"
tabpfn-bench-reg = "reg_main:main_reg"

[tool.setuptools]
packages = ["tools", "tools.tabular_metrics"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yaml", "*.yml"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tools"]

# mypy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "sklearn.*",
    "xgboost.*",
    "lightgbm.*",
    "catboost.*",
    "tabpfn.*",
    "hyperopt.*",
    "openml.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--cov=tools",
    "--cov-report=term-missing",
    "--cov-report=html",
]
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["tools"]
omit = [
    "tests/*",
    "*/tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "dist",
    "build",
    "*.egg-info",
]

# Bandit security linter
[tool.bandit]
exclude_dirs = ["tests", "*/tests/*"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]